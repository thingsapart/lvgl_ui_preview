#ifndef UI_BUILDER_LVGL_H
#define UI_BUILDER_LVGL_H

#ifdef __cplusplus
extern "C" {
#endif

#include <lvgl.h>
#include <stdbool.h>

// --- Resource Registration ---

/**
 * @brief Registers a named pointer (font, image, style, etc.) for lookup during UI building.
 * The builder takes ownership of the 'name' string (makes a copy).
 * @param name A unique name for the resource (e.g., "font_montserrat_24", "my_custom_style").
 * @param ptr Pointer to the resource (e.g., const lv_font_t*, const lv_img_dsc_t*, lv_style_t*).
 * @param type_tag A string tag identifying the resource type (e.g., "Font", "Image", "Style"). Used for type safety during lookup.
 * @return true on success, false on failure (e.g., duplicate name, allocation error).
 */
bool ui_builder_register_resource(const char *name, const void *ptr, const char *type_tag);

/**
 * @brief Helper macro to register a font.
 */
#define ui_builder_register_font(name, font_ptr) \
    ui_builder_register_resource(name, (const void*)(font_ptr), "Font")

/**
 * @brief Helper macro to register an image descriptor.
 */
#define ui_builder_register_image(name, img_dsc_ptr) \
    ui_builder_register_resource(name, (const void*)(img_dsc_ptr), "Image")

/**
 * @brief Helper macro to register a style.
 * Note: The style object itself should be initialized and properties set *before* registering.
 * The builder only stores the pointer; it doesn't manage the style's lifecycle or content.
 */
#define ui_builder_register_style(name, style_ptr) \
    ui_builder_register_resource(name, (const void*)(style_ptr), "Style")


/**
 * @brief Removes all registered resources and frees associated memory.
 * Call this when the builder is no longer needed or before re-registering resources.
 */
void ui_builder_cleanup_registrations(void);

// --- UI Building ---

/**
 * @brief Parses a JSON string and builds the corresponding LVGL UI hierarchy.
 *
 * @param parent The LVGL parent object under which the new UI will be created.
 * @param json_string A null-terminated string containing the JSON definition of the UI,
 *                    as generated by the emul_lvgl library.
 * @return A pointer to the top-level LVGL object created from the JSON root,
 *         or NULL if parsing or building fails.
 */
lv_obj_t* ui_builder_load_ui_from_json(lv_obj_t *parent, const char *json_string);


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* UI_BUILDER_LVGL_H */
